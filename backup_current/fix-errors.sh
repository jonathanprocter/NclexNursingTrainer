#!/usr/bin/env bash
set -e

echo "=== 1) Installing missing dependencies and their type definitions ==="

# The main libraries needed. 
# If you do NOT actually need some of these, feel free to remove them.
# If you need more, add them here.
npm install --save \
  next \
  next-auth \
  @auth/prisma-adapter \
  react-hot-toast \
  react-day-picker \
  framer-motion \
  react-markdown \
  input-otp \
  react-resizable-panels \
  embla-carousel-react \
  cmdk \
  vaul \
  lucide-react \
  classnames \
  prisma \
  @prisma/client \
  @tanstack/react-query

# Install official Radix UI packages that DO exist in npm:
npm install --save @radix-ui/react-accordion \
  @radix-ui/react-alert-dialog \
  @radix-ui/react-aspect-ratio \
  @radix-ui/react-avatar \
  @radix-ui/react-checkbox \
  @radix-ui/react-collapsible \
  @radix-ui/react-context-menu \
  @radix-ui/react-dialog \
  @radix-ui/react-dropdown-menu \
  @radix-ui/react-hover-card \
  @radix-ui/react-menubar \
  @radix-ui/react-navigation-menu \
  @radix-ui/react-popover \
  @radix-ui/react-progress \
  @radix-ui/react-radio-group \
  @radix-ui/react-scroll-area \
  @radix-ui/react-select \
  @radix-ui/react-separator \
  @radix-ui/react-slider \
  @radix-ui/react-switch \
  @radix-ui/react-tabs \
  @radix-ui/react-toast \
  @radix-ui/react-toggle \
  @radix-ui/react-toggle-group \
  @radix-ui/react-tooltip

# Dev dependencies for types:
npm install --save-dev \
  @types/node \
  @types/react \
  @types/react-dom \
  @types/react-hot-toast \
  @types/react-day-picker \
  @types/framer-motion \
  @types/react-markdown \
  @types/embla-carousel-react \
  @types/next \
  @types/next-auth \
  @types/classnames

echo "=== 2) Creating custom type declarations for missing packages ==="
# We place everything in src/auto-declarations.d.ts
if [ ! -d "src" ]; then
  mkdir src
fi

cat <<EOF > src/auto-declarations.d.ts
// Auto-generated by fix-errors.sh

// Because "input-otp" has no official type definitions:
declare module "input-otp";

// "cmdk" also has no official @types/cmdk, so here's a minimal placeholder:
declare module "cmdk" {
  import * as React from "react";

  interface CommandProps extends React.HTMLAttributes<HTMLDivElement> {}
  export const Command: React.FC<CommandProps>;

  interface CommandInputProps
    extends React.InputHTMLAttributes<HTMLInputElement> {}
  export const CommandInput: React.FC<CommandInputProps>;

  // Add any further cmdk component definitions you use:
  // e.g., CommandList, CommandItem, ...
  // For now, just a placeholder so TS doesn't complain.
}
EOF

echo "=== 3) Removing unused 'React' imports (only if truly unused) ==="
# If you rely on old JSX transforms, remove/comment these out.
find src -type f \( -name "*.ts" -o -name "*.tsx" \) -exec \
  sed -i '/import React, {*/d' {} \;

find src -type f \( -name "*.ts" -o -name "*.tsx" \) -exec \
  sed -i '/import React from/d' {} \;

find src -type f \( -name "*.ts" -o -name "*.tsx" \) -exec \
  sed -i '/import \* as React from/d' {} \;

echo "=== 4) Fixing 'No overload matches this call' in useQuery(...) for modules ==="
# Replace useQuery(["modules"], fetchModules) with useQuery({ queryKey: ["modules"], queryFn: fetchModules })
sed -i 's/useQuery(\["modules"\], fetchModules)/useQuery({ queryKey: ["modules"], queryFn: fetchModules })/g' src/pages/Modules.tsx || true
sed -i 's/useQuery(\["modules"\], fetchModules)/useQuery({ queryKey: ["modules"], queryFn: fetchModules })/g' src/src/pages/Modules.tsx || true

echo "=== 5) Ensuring tsconfig.json has skipLibCheck, baseUrl, and '@/...' paths ==="
if [ ! -f tsconfig.json ]; then
  cat <<EOF > tsconfig.json
{
  "compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "@/*": ["*"]
    },
    "skipLibCheck": true,
    "strict": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}
EOF
else
  echo "NOTE: tsconfig.json already exists. Verify skipLibCheck, baseUrl, and paths inside it."
fi

echo "=== 6) Attempting 'npm audit fix' then 'npm audit fix --force' ==="
npm audit fix || true
npm audit fix --force || true

echo "=== DONE ==="
echo "Now try: npm run build (or npm run dev) again to see if the TypeScript errors are reduced."
